import { Solver, TDEnv, TDOpt } from './../.';
export declare class TDSolver extends Solver {
    protected readonly alpha: number;
    protected readonly epsilon: number;
    protected readonly gamma: number;
    protected readonly beta: number;
    protected readonly lambda: number;
    protected readonly numberOfPlanningSteps: number;
    protected readonly update: string;
    protected readonly qInitValue: number;
    protected readonly updateSmoothPolicy: boolean;
    protected readonly replacingTraces: boolean;
    protected numberOfActions: number;
    protected numberOfStates: number;
    protected pq: Array<number> | Float64Array;
    protected saSeen: Array<number>;
    protected envModelR: Array<number> | Float64Array;
    protected envModelS: Array<number> | Float64Array;
    protected eligibilityTraces: Array<number> | Float64Array;
    protected randomPolicies: Array<number> | Float64Array;
    protected Q: Array<number> | Float64Array;
    protected explored: boolean;
    protected a1: number;
    protected s1: number;
    protected r0: number;
    protected a0: number;
    protected s0: number;
    protected env: TDEnv;
    constructor(env: TDEnv, opt: TDOpt);
    reset(): void;
    decide(state: number): number;
    private shiftStateMemory;
    private epsilonGreedyActionPolicy;
    learn(r1: number): void;
    private learnFromTuple;
    private updateModel;
    private plan;
    private updatePriority;
    private updatePolicy;
    toJSON(): object;
    fromJSON(json: {}): void;
}
