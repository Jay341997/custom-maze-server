"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const _1 = require("./../.");
class DQNOpt extends _1.Opt {
    constructor() {
        super(...arguments);
        this.trainingMode = true;
        this.numberOfHiddenUnits = [100];
        this.epsilonMax = 1.0;
        this.epsilonMin = 0.1;
        this.epsilonDecayPeriod = 1e6;
        this.epsilon = 0.05;
        this.gamma = 0.9;
        this.alpha = 0.01;
        this.experienceSize = 1e6;
        this.doLossClipping = true;
        this.lossClamp = 1.0;
        this.doRewardClipping = true;
        this.rewardClamp = 1.0;
        this.keepExperienceInterval = 25;
        this.replaySteps = 10;
    }
    setNumberOfHiddenUnits(numberOfHiddenUnits) {
        this.numberOfHiddenUnits = numberOfHiddenUnits;
    }
    setEpsilonDecay(epsilonMax, epsilonMin, epsilonDecayPeriod) {
        this.epsilonMax = epsilonMax;
        this.epsilonMin = epsilonMin;
        this.epsilonDecayPeriod = epsilonDecayPeriod;
    }
    setEpsilon(epsilon) {
        this.epsilon = epsilon;
    }
    setGamma(gamma) {
        this.gamma = gamma;
    }
    setAlpha(alpha) {
        this.alpha = alpha;
    }
    setLossClipping(doLossClipping) {
        this.doLossClipping = doLossClipping;
    }
    setLossClamp(lossClamp) {
        this.lossClamp = lossClamp;
    }
    setRewardClipping(doRewardClipping) {
        this.doRewardClipping = doRewardClipping;
    }
    setRewardClamp(rewardClamp) {
        this.rewardClamp = rewardClamp;
    }
    setTrainingMode(trainingMode) {
        this.trainingMode = trainingMode;
    }
    setExperienceSize(experienceSize) {
        this.experienceSize = experienceSize;
    }
    setReplayInterval(keepExperienceInterval) {
        this.keepExperienceInterval = keepExperienceInterval;
    }
    setReplaySteps(replaySteps) {
        this.replaySteps = replaySteps;
    }
}
exports.DQNOpt = DQNOpt;
//# sourceMappingURL=dqn-opt.js.map