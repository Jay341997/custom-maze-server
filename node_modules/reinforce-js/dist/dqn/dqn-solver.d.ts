import { Net, Graph, Mat } from 'recurrent-js';
import { Solver, Env, DQNOpt } from './../.';
import { SarsaExperience } from './sarsa';
export declare class DQNSolver extends Solver {
    numberOfStates: number;
    numberOfActions: number;
    numberOfHiddenUnits: Array<number>;
    readonly epsilonMax: number;
    readonly epsilonMin: number;
    readonly epsilonDecayPeriod: number;
    readonly epsilon: number;
    readonly gamma: number;
    readonly alpha: number;
    readonly doLossClipping: boolean;
    readonly lossClamp: number;
    readonly doRewardClipping: any;
    readonly rewardClamp: any;
    readonly experienceSize: number;
    readonly keepExperienceInterval: number;
    readonly replaySteps: number;
    protected net: Net;
    protected previousGraph: Graph;
    protected shortTermMemory: SarsaExperience;
    protected longTermMemory: Array<SarsaExperience>;
    protected isInTrainingMode: boolean;
    protected learnTick: number;
    protected memoryIndexTick: number;
    constructor(env: Env, opt: DQNOpt);
    reset(): void;
    setTrainingModeTo(trainingMode: boolean): void;
    getTrainingMode(): boolean;
    toJSON(): object;
    fromJSON(json: {
        ns: any;
        nh: any;
        na: any;
        net: any;
    }): void;
    decide(state: Array<number>): number;
    protected epsilonGreedyActionPolicy(stateVector: Mat): number;
    protected currentEpsilon(): number;
    protected forwardQ(stateVector: Mat | null): Mat;
    protected backwardQ(stateVector: Mat | null): Mat;
    protected determineActionVector(graph: Graph, stateVector: Mat): Mat;
    protected backupGraph(graph: Graph): void;
    protected shiftStateMemory(stateVector: Mat, actionIndex: number): void;
    learn(r: number): void;
    private shiftRewardIntoMemory;
    protected clipReward(r: number): number;
    protected learnFromSarsaTuple(sarsa: SarsaExperience): void;
    protected getTargetQ(s1: Mat, r0: number): number;
    protected clipLoss(loss: number): number;
    protected addToReplayMemory(): void;
    protected addShortTermToLongTermMemory(): void;
    protected extractSarsaExperience(): SarsaExperience;
    protected limitedSampledReplayLearning(): void;
}
