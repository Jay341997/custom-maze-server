import { Graph, Mat, InnerState, NetOpts } from './..';
import { Assertable } from './../utils/assertable';
export declare abstract class RNNModel extends Assertable {
    protected architecture: {
        inputSize: number;
        hiddenUnits: Array<number>;
        outputSize: number;
    };
    model: {
        hidden: any;
        decoder: {
            Wh: Mat;
            b: Mat;
        };
    };
    protected graph: Graph;
    constructor(opt: {
        hidden: any;
        decoder: {
            Wh: Mat;
            b: Mat;
        };
    });
    constructor(opt: NetOpts);
    protected abstract isFromJSON(opt: any): boolean;
    protected initializeModelFromJSONObject(opt: {
        hidden: any;
        decoder: {
            Wh: Mat;
            b: Mat;
        };
    }): void;
    protected abstract initializeHiddenLayerFromJSON(opt: {
        hidden: any;
        decoder: {
            Wh: Mat;
            b: Mat;
        };
    }): void;
    private isFreshInstanceCall;
    private initializeModelAsFreshInstance;
    protected abstract initializeNetworkModel(): {
        hidden: any;
        decoder: {
            Wh: Mat;
            b: Mat;
        };
    };
    protected abstract initializeHiddenLayer(mu: number, std: number): void;
    protected initializeDecoder(mu: number, std: number): void;
    abstract forward(input: Mat, previousActivationState?: InnerState, graph?: Graph): InnerState;
    update(alpha: number): void;
    protected abstract updateHiddenUnits(alpha: number): void;
    protected abstract updateDecoder(alpha: number): void;
    protected computeOutput(hiddenActivations: Mat[], graph: Graph): Mat;
    protected static has(obj: any, keys: Array<string>): boolean;
}
