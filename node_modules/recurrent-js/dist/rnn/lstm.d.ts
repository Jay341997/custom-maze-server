import { Mat, Graph, InnerState, NetOpts } from './..';
import { RNNModel } from './rnn-model';
export declare class LSTM extends RNNModel {
    constructor(opt: {
        hidden: {
            input: {
                Wh: any;
                Wx: any;
                bh: any;
            };
            forget: {
                Wh: any;
                Wx: any;
                bh: any;
            };
            output: {
                Wh: any;
                Wx: any;
                bh: any;
            };
            cell: {
                Wh: any;
                Wx: any;
                bh: any;
            };
        };
        decoder: {
            Wh: any;
            b: any;
        };
    });
    constructor(opt: NetOpts);
    protected initializeNetworkModel(): {
        hidden: any;
        decoder: {
            Wh: Mat;
            b: Mat;
        };
    };
    protected isFromJSON(opt: any): boolean;
    protected initializeHiddenLayerFromJSON(opt: {
        hidden: any;
        decoder: {
            Wh: Mat;
            b: Mat;
        };
    }): void;
    private isValid;
    protected initializeHiddenLayer(): void;
    forward(input: Mat, previousActivationState?: InnerState, graph?: Graph): InnerState;
    private computeHiddenActivations;
    private getPreviousCellActivationsFrom;
    private getPreviousHiddenUnitActivationsFrom;
    private givenPreviousActivationState;
    protected updateHiddenUnits(alpha: number): void;
    protected updateDecoder(alpha: number): void;
}
