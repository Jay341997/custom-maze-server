"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const _1 = require("../.");
describe('Recurrent Neural Network Model:', () => {
    let sut;
    describe('Instantiation:', () => {
        describe('Configuration with NetOpts:', () => {
            const config = { architecture: { inputSize: 2, hiddenUnits: [3, 4], outputSize: 3 } };
            beforeEach(() => {
                sut = new _1.RNN(config);
            });
            describe('Hidden Layer:', () => {
            });
            describe('Decoder Layer:', () => {
                it('fresh instance >> on creation >> model should hold decoder layer containing weight matrix with given dimensions', () => {
                    sut = new _1.RNN(config);
                    expectDecoderWeightMatrixToHaveDimensionsOf(3, 4);
                });
                it('fresh instance >> on creation >> model should hold decoder layer containing bias matrix with given dimensions', () => {
                    sut = new _1.RNN(config);
                    expectDecoderBiasMatrixToHaveDimensionsOf(3, 1);
                });
                const expectDecoderWeightMatrixToHaveDimensionsOf = (expectedRows, expectedCols) => {
                    expect(sut.model.decoder.Wh.rows).toBe(expectedRows);
                    expect(sut.model.decoder.Wh.cols).toBe(expectedCols);
                };
                const expectDecoderBiasMatrixToHaveDimensionsOf = (expectedRows, expectedCols) => {
                    expect(sut.model.decoder.b.rows).toBe(expectedRows);
                    expect(sut.model.decoder.b.cols).toBe(expectedCols);
                };
            });
        });
        describe('Configuration with JSON Object', () => {
        });
    });
});
//# sourceMappingURL=rnn-model.spec.js.map